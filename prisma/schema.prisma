generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Resume {
  id     String @id @default(cuid())
  userId String

  title       String?
  description String?

  photoUrl    String?
  colorHex    String  @default("#000000")
  borderStyle String  @default("squircle")
  summary     String?
  firstName   String?
  lastName    String?
  jobTitle    String?
  city        String?
  country     String?
  phone       String?
  email       String?

  workExperiences WorkExperience[]
  educations      Education[]
  skills          String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resumes")
}

model WorkExperience {
  id String @id @default(cuid())

  position    String?
  company     String?
  startDate   DateTime?
  endDate     DateTime?
  description String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_experiences")
}

model Education {
  id String @id @default(cuid())

  degree    String?
  school    String?
  startDate DateTime?
  endDate   DateTime?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("educations")
}



model UserSubscription {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  userEmail               String?
  stripeCustomerId        String   @unique
  stripeSubscriptionId    String   @unique
  stripePriceId           String
  stripeCurrentPeriodEnd  DateTime
  stripeCancelAtPeriodEnd Boolean  @default(false)

  subscriptionStatus      String   @default("free")
  subscriptionEndDate     DateTime?

  // Separate trials for each paid plan
  proTrialStart           DateTime?
  proTrialEnd             DateTime?
  proTrialExpired         Boolean   @default(false)

  enterpriseTrialStart    DateTime?
  enterpriseTrialEnd      DateTime?
  enterpriseTrialExpired  Boolean   @default(false)

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("user_subscriptions")
}




model CoverLetter {
  id     String @id @default(cuid())
  userId String

  title       String?
  description String? @db.Text
  

  photoUrl    String?
  colorHex    String  @default("#000000")
  borderStyle String  @default("modern")
  summary     String?
  firstName   String?
  lastName    String?
  jobTitle    String?
  city        String?
  country     String?
  phone       String?
  email       String?
  applicationLink   String?
  // Introduction
  opening          String    @db.Text    // What you're applying for & Why

  // Body Content
  experience       String    @db.Text    // Story behind achievements
  achievements     String    @db.Text    // Specific metrics and accomplishments
  companyKnowledge String    @db.Text    // Where you're applying to & company research
  
  futurePlans      String    @db.Text    // Mention of future plans/goals
  closing          String    @db.Text    // Thank you and conclusion
  coverLetterWorkExperience CoverLetterWorkExperience[]
  jobDescription      JobDescription[]
  skills          String[]        // Technical skills and capabilities
  recipientInfo RecipientInfo[]
  Achievement Achievement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cover_letters")
}


model RecipientInfo {
  id              String     @id @default(cuid())
  recipientName   String
  recipientTitle  String
  companyName     String
  jobTitle        String
  jobReference    String?    // Added back as an optional field
  coverLetterId   String
  coverLetter     CoverLetter @relation(fields: [coverLetterId], references: [id], onDelete: Cascade)
  @@map("recipient_info")
}


model JobDescription {
  id                String   @id @default(cuid())
  
  title             String   // Job title
  companyName       String   // Name of the company
  location          String?  // Job location (optional)
  employmentType    String?  // Type of employment (e.g., Full-time, Part-time, Contract)
  salaryRange       String?  // Salary range (optional)
  responsibilities   String[] // List of job responsibilities
  qualifications    String[] // List of required qualifications
  createdAt         DateTime @default(now()) // Timestamp for when the job description was created
  updatedAt         DateTime @updatedAt // Timestamp for when the job description was last updated
  coverLetterId String
  coverLetter   CoverLetter @relation(fields: [coverLetterId], references: [id], onDelete: Cascade)
  @@map("job_descriptions")
}

model CoverLetterWorkExperience {
  id String @id @default(cuid())

  position    String?
  company     String?
  startDate   DateTime?
  endDate     DateTime?
  description String? @db.Text

  coverLetterId String
  coverLetter   CoverLetter @relation(fields: [coverLetterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cover_letter_work_experience")
}

model Achievement {
  id          String @id @default(cuid())
  description String  @db.Text
  impact      String  @db.Text
  date        DateTime


  coverLetterId String
  coverLetter   CoverLetter @relation(fields: [coverLetterId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(cuid())
  rating    String
  comment   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}